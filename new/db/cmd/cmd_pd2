NAME=bytes for invalid insn (#11434)
FILE=-
CMDS=<<EXPECT
e asm.arch=x86
e asm.bits=64
wx 60; pd 2
?e
wx 906090; pd 3
EXPECT=<<RUN
            0x00000000      60             invalid
            0x00000001      0000           add byte [rax], al

            0x00000000      90             nop
            0x00000001      60             invalid
            0x00000002      90             nop
RUN

NAME=arm indirect relsub fix (#11780)
FILE=../bins/elf/analysis/arm_32_flags0
CMDS=<<EXPECT
e asm.bytes=false
e asm.cmt.right=true
pd 1 @ 0x000102e0
pd 1 @ 0x000102e8
?e
e asm.cmt.right=false
pd 1 @ 0x000102e0
pd 1 @ 0x000102e8
EXPECT=<<RUN
            0x000102e0      ldr ip, sym.__libc_csu_fini                ; [loc._d_2:4]=0x10494 sym.__libc_csu_fini
            0x000102e8      ldr r0, sym.main                           ; [0x102fc:4]=0x10408 sym.main

            ; [loc._d_2:4]=0x10494 sym.__libc_csu_fini
            0x000102e0      ldr ip, sym.__libc_csu_fini
            ; [0x102fc:4]=0x10408 sym.main
            0x000102e8      ldr r0, sym.main
RUN

NAME=realign after sparse (#11810)
FILE=../bins/pe/cmd_adf_sample0.exe
CMDS=<<EXPECT
e asm.bytes=false
e asm.comments=false
s 0x560e67
af
pdf
EXPECT=<<RUN
/ (fcn) fcn.00560e67 6412
|   fcn.00560e67 ();
|     ::    ; var int var_4h @ esp+0x4
|     ::    ; var int var_8h @ esp+0x8
|     ::    ; var int var_10h @ esp+0x10
|     ::    ; var int var_24h @ esp+0x24
|     ::    ; var int var_28h @ esp+0x28
|     ::    0x00560e67      push esi
|    ,====< 0x00560e68      jmp 0x560e7d
..
|    `----> 0x00560e7d      pop esi
|     ::    0x00560e7e      push eax
|     ::    0x00560e7f      push edx
|    ,====< 0x00560e80      jmp 0x560e96
..
|   |`----> 0x00560e96      rdtsc
|   | ::    0x00560e98      jmp 0x560eb1
..
|   ||::    0x00560eb1      pop edx
|   ||::    0x00560eb2      pop eax
|   ||::    0x00560eb3      pushfd
|   ||::    0x00560eb4      push eax
|   ||::    0x00560eb5      mov dword [esp], ecx
|   ||::    0x00560eb8      push ecx
|   ||::    0x00560eb9      mov dword [esp], 0x4b7dbaf4
|   ||::    0x00560ec0      mov dword [esp], ebx
|   ||::    0x00560ec3      mov ebx, 0x60
|   ||::    0x00560ec8      mov dword [var_4h], ebx
|   ||::    0x00560ecc      pop ebx
|   ||::    0x00560ecd      push ecx
|   ||::    0x00560ece      mov dword [esp], 0x7fdd7312
|   ||::    0x00560ed5      or dword [esp], 0x76fe6216
|    |::    0x00560edc      shl dword [esp], 1
|    |::    0x00560ee0      or dword [esp], 0x5677e157
|    |::    0x00560ee7      sub dword [esp], 0x66a97007
|    |::    0x00560eee      add dword [esp], 0xd4a8fad4
|    |::    0x00560ef5      xchg dword [esp], ebp
|    |::    0x00560ef8      not ebp
|    |::    0x00560efa      xchg dword [esp], ebp
|    |::    0x00560efd      inc dword [esp]
|    |::    0x00560f00      sub dword [esp], 0x91ea8610
|    |::    0x00560f07      push ebp
|    |::    0x00560f08      mov ebp, esp
|    |::    0x00560f0a      add ebp, 4
|    |::    0x00560f10      sub ebp, 4
|    |::    0x00560f16      xchg dword [esp], ebp
|    |::    0x00560f19      pop esp
|    |::    0x00560f1a      mov dword [esp], ecx
|    |::    0x00560f1d      mov dword [esp], eax
|    |::    0x00560f20      push 0x5a9b4939
|    |::    0x00560f25      mov dword [esp], ecx
|    |::    0x00560f28      mov ecx, esp
|     ::    0x00560f2a      push ebx
|     ::    0x00560f2b      mov ebx, 4
|     ::    0x00560f30      add ecx, ebx
|     ::    0x00560f32      pop ebx
|     ::    0x00560f33      sub ecx, 4
|     ::    0x00560f36      xor ecx, dword [esp]
|     ::    0x00560f39      xor dword [esp], ecx
|     ::    0x00560f3c      xor ecx, dword [esp]
|     ::    0x00560f3f      pop esp
|     ::    0x00560f40      mov dword [esp], ebx
|     ::    0x00560f43      push dword [var_10h]
|     ::    0x00560f47      mov eax, dword [esp]
|     ::    0x00560f4a      push esi
|     ::    0x00560f4b      mov esi, esp
|     ::    0x00560f4d      push edx
|     ::    0x00560f4e      mov edx, 0x75ff55bb
|     ::    0x00560f53      and edx, 0x7e5d8b17
|     ::    0x00560f59      xor edx, 0x745d0117
|     ::    0x00560f5f      add esi, edx
|     ::    0x00560f61      mov edx, dword [esp]
|     ::    0x00560f64      add esp, 4
|     ::    0x00560f67      add esi, 4
|     ::    0x00560f6d      xchg dword [esp], esi
|     ::    0x00560f70      pop esp
|     ::    0x00560f71      push dword [var_8h]
|     ::    0x00560f75      push dword [esp]
|     ::    0x00560f78      mov ebx, dword [esp]
|     ::    0x00560f7b      push ebx
|     ::    0x00560f7c      mov ebx, esp
|     ::    0x00560f7e      add ebx, 4
|     ::    0x00560f84      add ebx, 4
|     ::    0x00560f8a      xchg dword [esp], ebx
|     ::    0x00560f8d      pop esp
|     ::    0x00560f8e      add esp, 4
|     ::    0x00560f91      mov dword [var_8h], eax
|     ::    0x00560f95      mov dword [var_10h], ebx
|     ::    0x00560f99      push dword [esp]
|     ::    0x00560f9c      pop ebx
|     ::    0x00560f9d      push ebx
|     ::    0x00560f9e      mov ebx, esp
|     ::    0x00560fa0      add ebx, 4
|     ::    0x00560fa6      add ebx, 4
|     ::    0x00560fa9      push ebx
|     ::    0x00560faa      push dword [var_4h]
|     ::    0x00560fae      pop ebx
|     ::    0x00560faf      pop dword [esp]
|     ::    0x00560fb2      mov esp, dword [esp]
|     ::    0x00560fb5      mov eax, dword [esp]
|     ::    0x00560fb8      push ebx
|     ::    0x00560fb9      mov dword [esp], 0x1e8e43e4
|     ::    0x00560fc0      mov dword [esp], eax
|     ::    0x00560fc3      mov eax, esp
|     ::    0x00560fc5      add eax, 4
|     ::    0x00560fca      add eax, 4
|     ::    0x00560fcf      xchg dword [esp], eax
|     ::    0x00560fd2      mov esp, dword [esp]
\     :`==< 0x00560fd5      jmp 0x43d3f7
..
RUN

NAME=pdf hidden code in sparse fix
FILE=../bins/pe/cmd_adf_sample0.exe
CMDS=<<EXPECT
e asm.var=false
e io.cache=true
wx 90eb09 @ 0x560e71
wx e904000000 @ 0x560e68
wx e940c5edff @ 0x560eb2
s 0x560e67
af
pdf
?e
pdr.
EXPECT=<<RUN
/ (fcn) fcn.00560e67 6124
|    :::    0x00560e67      56             push esi
|   ,=====< 0x00560e68      e904000000     jmp 0x560e71
..
|   |:::    ; CODE XREF from fcn.00560e67 (0x560e68)
|   `-----> 0x00560e71      90             nop
|    :::    0x00560e72      eb09           jmp 0x560e7d
..
|    :::    ; CODE XREF from fcn.00560e67 (0x560e72)
|    :::    0x00560e7d      5e             pop esi
|    :::    0x00560e7e      50             push eax
|    :::    0x00560e7f      52             push edx
|   ,=====< 0x00560e80      e911000000     jmp 0x560e96
..
|  ||:::    ; CODE XREF from fcn.00560e67 (0x560e80)
|  |`-----> 0x00560e96      0f31           rdtsc
|  | :::    0x00560e98      e914000000     jmp 0x560eb1
..
|  ||:::    ; CODE XREF from fcn.00560e67 (0x560e98)
|  ||:::    0x00560eb1      5a             pop edx
\  ||:`===< 0x00560eb2      e940c5edff     jmp 0x43d3f7
..

/ (fcn) fcn.00560e67 6124
| 0x00560e67      56             push esi
| 0x00560e68      e904000000     jmp 0x560e71
| ----------- true: 0x00560e71
| ; CODE XREF from fcn.00560e67 (0x560e68)
| 0x00560e71      90             nop
| 0x00560e72      eb09           jmp 0x560e7d
| ----------- true: 0x00560e7d
| ; CODE XREF from fcn.00560e67 (0x560e72)
| 0x00560e7d      5e             pop esi
| 0x00560e7e      50             push eax
| 0x00560e7f      52             push edx
| 0x00560e80      e911000000     jmp 0x560e96
| ----------- true: 0x00560e96
| ; CODE XREF from fcn.00560e67 (0x560e80)
| 0x00560e96      0f31           rdtsc
| 0x00560e98      e914000000     jmp 0x560eb1
| ----------- true: 0x00560eb1
| ; CODE XREF from fcn.00560e67 (0x560e98)
| 0x00560eb1      5a             pop edx
\ 0x00560eb2      e940c5edff     jmp 0x43d3f7
| ----------- true: 0x0043d3f7
RUN

NAME=esil func cmts
FILE=../bins/elf/arm1.bin
CMDS=<<EXPECT
tk func.__libc_start_main.noreturn=false
e asm.emu=true
e emu.write=true
s 0x8174
af
e asm.cmt.right=true
pdf
?e
e asm.cmt.right=false
pdf
?e
agf
EXPECT=<<RUN
/ (fcn) fcn.00008174 8
|   fcn.00008174 ();
|           0x00008174      b80000eb       bl sym.__libc_start_main    ; lr=0x8178 -> 0xeb0002a4 ; pc=0x845c -> 0xe92d41f0
|                                                                      ; int __libc_start_main(func: unk_size_format, int argc : 0x00000000 = 4294967295, char **: unk_size_format, func: unk_size_format, func: unk_size_format, func: unk_size_format, void * stack_end : (*0xffffffff)0x00000000 = 0xffffffff)
\           0x00008178      a40200eb       bl sym.abort                ; lr=0x817c -> 0xe92d4030 loc._d_2 ; pc=0x8c10 -> 0xe59f62a0
\                                                                      ; void abort(void)

/ (fcn) fcn.00008174 8
|   fcn.00008174 ();
|              ; lr=0x8178 -> 0xeb0002a4
|              ; pc=0x845c -> 0xe92d41f0 sym.__libc_start_main
|              ; int __libc_start_main(func: unk_size_format, int argc : 0x00000000 = 4294967295, char **: unk_size_format, func: unk_size_format, func: unk_size_format, func: unk_size_format, void * stack_end : (*0xffffffff)0x00000000 = 0xffffffff)
|           0x00008174      b80000eb       bl sym.__libc_start_main
|              ; lr=0x817c -> 0xe92d4030 loc._d_2
|              ; pc=0x8c10 -> 0xe59f62a0 sym.abort
|              ; void abort(void)
\           0x00008178      a40200eb       bl sym.abort

[0x00008174]> VV @ fcn.00008174 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y mov-speed:5
.------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------.
|  0x8174                                                                                                                                                                                                                                        |
| (fcn) fcn.00008174 8                                                                                                                                                                                                                           |
|   fcn.00008174 ();                                                                                                                                                                                                                             |
|    ; lr=0x8178 -> 0xeb0002a4                                                                                                                                                                                                                   |
|    ; pc=0x845c -> 0xe92d41f0 sym.__libc_start_main                                                                                                                                                                                             |
|    ; int __libc_start_main(func: unk_size_format, int argc : 0x00000000 = 4294967295, char **: unk_size_format, func: unk_size_format, func: unk_size_format, func: unk_size_format, void * stack_end : (*0xffffffff)0x00000000 = 0xffffffff)  |
| bl sym.__libc_start_main;[ga]                                                                                                                                                                                                                  |
|    ; lr=0x817c -> 0xe92d4030 loc._d_2                                                                                                                                                                                                          |
|    ; pc=0x8c10 -> 0xe59f62a0 sym.abort                                                                                                                                                                                                         |
|    ; void abort(void)                                                                                                                                                                                                                          |
| bl sym.abort;[gb]                                                                                                                                                                                                                              |
`------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
RUN

NAME=esil func cmt refline
FILE=../bins/elf/ls
CMDS=<<EXPECT
e io.cache=true
e asm.emu=true
wx 7d0a7f08eb00 @ 0x5b02
pd 4 @ 0x5b02
EXPECT=<<RUN
        ,=< 0x00005b02      7d0a           jge 0x5b0e                  ; rip=0x5b0e -> 0x8d4890f4 ; likely
       ,==< 0x00005b04      7f08           jg 0x5b0e                   ; rip=0x5b0e -> 0x8d4890f4 ; likely
      ,===< 0x00005b06      eb00           jmp 0x5b08                  ; rip=0x5b08 -> 0xc30a15ff
      `---> 0x00005b08      ff150ac30100   call qword [reloc.__libc_start_main] ; [0x21e18:8]=0 ; rsp=0xfffffffffffffff8 ; rip=0x0
       ||                                                              ; int __libc_start_main(func: unk_size_format, int argc : 0x00000000 = 1179403647, char **: unk_size_format, func: unk_size_format, func: unk_size_format, func: unk_size_format, void * stack_end : 0x00000000 = (qword)0x00010102464c457f)
RUN

NAME=ta asm.cmt.right=false fix (#12330)
FILE=-
CMDS=<<EXPECT
e asm.arch=x86
e asm.bits=64
e io.cache=true
wx 488b4608
"td struct ms { char b[8]; int member1; int member2; };"
ta ms.member1
e asm.cmt.right=true
pd 1
e asm.cmt.right=false
pd 1
EXPECT=<<RUN
            0x00000000      488b4608       mov rax, qword [rsi + ms.member1] ; [0x8:8]=0
            ; [0x8:8]=0
            0x00000000      488b4608       mov rax, qword [rsi + ms.member1]
RUN

NAME=asm.bbline no-anal glitch fix (#12516)
FILE=../bins/elf/lab2
CMDS=<<EXPECT
e asm.bbline=true
e asm.bytes=false
e asm.comments=false
e io.cache=true
wx 907f04 @ 0x08048597
wx 75f3909090 @ 0x080485bc
s 0x08048598
pd 11
?e
pdJ 11~{}
EXPECT=<<RUN
        ,=< 0x08048598      jg 0x804859e
        |   |
        |   0x0804859a      cmp al, byte [esp + 0x27]
       ,`-> 0x0804859e      je 0x80485b3
       |    |
       |    0x080485a0      mov dword [esp], str.Wrong
       |    0x080485a7      call sym.imp.puts
       |    0x080485ac      mov eax, 1
      ,=.-> 0x080485b1      jmp 0x80485f9
      ||:   |
      |`--> 0x080485b3      add dword [esp + 0x20], 1
      | :   0x080485b8      mov ebx, dword [esp + 0x20]
      | `=< 0x080485bc      jne 0x80485b1
      |     |
      |     0x080485be      nop

[
  {
    "offset": 134514072,
    "text": "        ,=< 0x08048598      jg 0x804859e"
  },
  {
    "offset": 134514072,
    "text": "        |   |"
  },
  {
    "offset": 134514074,
    "text": "        |   0x0804859a      cmp al, byte [esp + 0x27]"
  },
  {
    "offset": 134514078,
    "text": "       ,`-> 0x0804859e      je 0x80485b3"
  },
  {
    "offset": 134514078,
    "text": "       |    |"
  },
  {
    "offset": 134514080,
    "text": "       |    0x080485a0      mov dword [esp], str.Wrong"
  },
  {
    "offset": 134514087,
    "text": "       |    0x080485a7      call sym.imp.puts"
  },
  {
    "offset": 134514092,
    "text": "       |    0x080485ac      mov eax, 1"
  },
  {
    "offset": 134514097,
    "text": "      ,=.-> 0x080485b1      jmp 0x80485f9"
  },
  {
    "offset": 134514097,
    "text": "      ||:   |"
  },
  {
    "offset": 134514099,
    "text": "      |`--> 0x080485b3      add dword [esp + 0x20], 1"
  },
  {
    "offset": 134514104,
    "text": "      | :   0x080485b8      mov ebx, dword [esp + 0x20]"
  },
  {
    "offset": 134514108,
    "text": "      | `=< 0x080485bc      jne 0x80485b1"
  },
  {
    "offset": 134514108,
    "text": "      |     |"
  },
  {
    "offset": 134514110,
    "text": "      |     0x080485be      nop"
  }
]
RUN

NAME=asm.bbline anal
FILE=../bins/elf/ls
CMDS=<<EXPECT
e asm.bbline=true
e asm.bytes=false
e asm.comments=false
e io.cache=true
wx 907f03 @ 0x4232
wx 72f1909090 @ 0x424a
s main
aF
s 0x4233
pd 9
?e
pdJ 9~{}
EXPECT=<<RUN
|       ,=< 0x00004233      jg 0x4238
|       |   |
|       |   0x00004235      test rax, rax
|       |   |
|      ,`-> 0x00004238      je 0x4243
|      |    |
|      |    0x0000423a      cmp byte [rax], 0
|      |    |
|     ,=.-> 0x0000423d      jne 0x4b1c
|     ||:   |
|     |`--> 0x00004243      lea r12, [var_30h]
|     | :   0x00004248      xor eax, eax
|     | `=< 0x0000424a      jb 0x423d
|     |     |
|     |     0x0000424c      nop

[
  {
    "offset": 16947,
    "text": "|       ,=< 0x00004233      jg 0x4238"
  },
  {
    "offset": 16949,
    "text": "|       |   |"
  },
  {
    "offset": 16949,
    "text": "|       |   0x00004235      test rax, rax"
  },
  {
    "offset": 16952,
    "text": "|       |   |"
  },
  {
    "offset": 16952,
    "text": "|      ,`-> 0x00004238      je 0x4243"
  },
  {
    "offset": 16954,
    "text": "|      |    |"
  },
  {
    "offset": 16954,
    "text": "|      |    0x0000423a      cmp byte [rax], 0"
  },
  {
    "offset": 16957,
    "text": "|      |    |"
  },
  {
    "offset": 16957,
    "text": "|     ,=.-> 0x0000423d      jne 0x4b1c"
  },
  {
    "offset": 16963,
    "text": "|     ||:   |"
  },
  {
    "offset": 16963,
    "text": "|     |`--> 0x00004243      lea r12, [var_30h]"
  },
  {
    "offset": 16968,
    "text": "|     | :   0x00004248      xor eax, eax"
  },
  {
    "offset": 16970,
    "text": "|     | `=< 0x0000424a      jb 0x423d"
  },
  {
    "offset": 16972,
    "text": "|     |     |"
  },
  {
    "offset": 16972,
    "text": "|     |     0x0000424c      nop"
  }
]
RUN
